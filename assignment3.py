# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CkG3TNJGVxT5SUsqFJM7fjYzlrWS3NJv
"""

# preamble to be able to run notebooks in Jupyter and Colab
try:
    from google.colab import drive
    import sys
    
    drive.mount('/content/drive')
    notes_home = "/content/drive/My Drive/csc310/"
    user_home = "/content/drive/My Drive/"
    
    sys.path.insert(1,notes_home) # let the notebook access the notes folder

except ModuleNotFoundError:
    notes_home = "" # running native Jupyter environment -- notes home is the same as the notebook
    user_home = ""  # under Jupyter we assume the user directory is the same as the notebook

import pandas as pd
from sklearn import tree
from treeviz import tree_print
from sklearn.metrics import accuracy_score

"""This part is making the Tree for playing Tennis."""

tennis = pd.read_csv(notes_home+"tennis_numeric.csv")
tennis.head()

features_tennis = tennis.drop(['play'],axis=1)
features_tennis.head()

target_tennis = pd.DataFrame(df['play'])
target_tennis.head()

dtree = tree.DecisionTreeClassifier(criterion='entropy')

dtree.fit(features_tennis,target_tennis)

tree_print(dtree,features_tennis)

predict_array = dtree.predict(features_tennis)      # produces an array of labels
predicted_labels = pd.DataFrame(predict_array)  # turn it into a DF
predicted_labels.columns = ['play']

predicted_labels.head()

predicted_labels.equals(target_tennis)

"""Here is where we answer the question: ** If the tree models the data set completely**"""

from sklearn.metrics import accuracy_score

print("Our model accuracy is: {}".format(accuracy_score(target_tennis, predicted_labels)))

"""The tree does model the data set completley."""

mammals = pd.read_csv(notes_home+"mammals_numeric.csv")
mammals.head()

"""Taken from Shared drive and changed yes -> 1 , 0 -> no"""

features_mammals = mammals.drop(['Mammal'],axis = 1)
features_mammals.head()

target_mammals = pd.DataFrame(mammals['Mammal'])
target_mammals.head()

dtree = tree.DecisionTreeClassifier(criterion='entropy')

dtree.fit(features_mammals,target_mammals)

predict_array = dtree.predict(features_mammals)      # produces an array of labels
predicted_labels = pd.DataFrame(predict_array)  # turn it into a DF
predicted_labels.columns = ['Mammal']          # name the column - same name as in target!

predicted_labels.head()

predicted_labels.equals(target_mammals)

print("Our model accuracy is: {}".format(accuracy_score(target_mammals, predicted_labels)))