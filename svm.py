# -*- coding: utf-8 -*-
"""SVM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g6mSxCjC2H4aHuAHOiwouWmvRh_Tj5vs
"""

# preamble to be able to run notebooks in Jupyter and Colab
try:
    from google.colab import drive
    import sys
    
    drive.mount('/content/drive')
    notes_home = "/content/drive/My Drive/csc310/"
    user_home = "/content/drive/My Drive/"
    
    sys.path.insert(1,notes_home) # let the notebook access the notes folder

except ModuleNotFoundError:
    notes_home = "" # running native Jupyter environment -- notes home is the same as the notebook
    user_home = ""  # under Jupyter we assume the user directory is the same as the notebook

# set up
import pandas as pd
import numpy as np
np.set_printoptions(formatter={'float_kind':"{:3.2f}".format})
from sklearn import svm
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
crohn = pd.read_csv(notes_home+"CrohnD.csv")
crohn

df = crohn.drop(columns=['ID'],axis=1)
df = df.drop(columns=['treat'],axis=1)

df.replace('c1',0,inplace=True)
df.replace('c2',1,inplace=True)
df.replace('F',0,inplace=True)
df.replace('M',1,inplace=True)
df

"""##**Kernal Linear:**"""

x = np.asarray(df)
y = np.asarray(crohn['treat'])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=4)
x_train.shape
y_train.shape

svm = SVC(kernel='linear')
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

"""##**kernel: poly by varying parameters 'degree' between 2-6, 'coef0'  around 1.0**"""

svm = SVC(kernel='poly',degree=3,coef0=1)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

svm = SVC(kernel='poly',degree=4,coef0=1)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

svm = SVC(kernel='poly',degree=5,coef0=1)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

"""##**kernel: rbf by varying parameters 'gamma' between 'scale', 'auto'**"""

svm = SVC(kernel='rbf',gamma='scale')
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

svm = SVC(kernel='rbf',gamma='auto')
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

"""##**kernel: sigmoid by varying parameter coef0**"""

svm = SVC(kernel='sigmoid',coef0=1)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

svm = SVC(kernel='sigmoid',coef0=2)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

svm = SVC(kernel='sigmoid',coef0=3)
svm.fit(x_train,y_train)
y_predict = svm.predict(x_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

"""##**Report:**

The best SVM model ended up being kernel='poly',degree=4,coef0=1 with .44 precision while the worst was sigmoid at .29. In sigmoid when raising the coefficent nothing seemed to change. For rbf, scaled worked better than auto. For poly, the best degree was at 4 while 5 was the worst which was weird. Linear was the next worst after sigmoid.
"""