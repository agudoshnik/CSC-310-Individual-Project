# -*- coding: utf-8 -*-
"""Model Comparison

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x2qXpciq_pe-4sVU3NZrj-KGut8ZkP3N
"""

# preamble to be able to run notebooks in Jupyter and Colab
try:
    from google.colab import drive
    import sys
    
    drive.mount('/content/drive')
    notes_home = "/content/drive/My Drive/csc310/"
    user_home = "/content/drive/My Drive/"
    
    sys.path.insert(1,notes_home) # let the notebook access the notes folder

except ModuleNotFoundError:
    notes_home = "" # running native Jupyter environment -- notes home is the same as the notebook
    user_home = ""  # under Jupyter we assume the user directory is the same as the notebook

"""##**Set up:**"""

# set up
import pandas as pd
import numpy as np
np.set_printoptions(formatter={'float_kind':"{:3.2f}".format})
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
df = pd.read_csv(notes_home+"CrohnD.csv")
df

df = df.drop(columns=['ID'],axis=1)

df

df.replace('c1',0,inplace=True)
df.replace('c2',1,inplace=True)
df.replace('F',0,inplace=True)
df.replace('M',1,inplace=True)

df

"""##**1 Layer MLP:**"""

# set up
import pandas as pd
import numpy as np
np.set_printoptions(formatter={'float_kind':"{:3.2f}".format})
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import GridSearchCV
from assets.confint import classification_confint

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000)

# grid search
param_grid = {'hidden_layer_sizes': [ (1,), (2,), (3,), (4,), 
                                     (5,), (6,), (7,), (8,), 
                                     (9,), (10,), (11,), (12,),
                                     (13,),(14,),(15,),(16,),(17,),(18,),(19,),(20,)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**2 Layer MLP:**"""

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000)

# grid search
param_grid = {'hidden_layer_sizes': [ (1,20), (2,20), (3,20), (4,20), 
                                     (5,20), (6,20), (7,20), (8,20), 
                                     (9,20), (10,20), (11,20), (12,20),
                                     (13,20),(14,20),(15,20),(16,20),(17,20),(18,20),(19,20),(20,20)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**With Relu and logistic:**

##**Layer 1 Relu:**
"""

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000,activation='relu')

# grid search
param_grid = {'hidden_layer_sizes': [ (1,), (2,), (3,), (4,), 
                                     (5,), (6,), (7,), (8,), 
                                     (9,), (10,), (11,), (12,),
                                     (13,),(14,),(15,),(16,),(17,),(18,),(19,),(20,)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**Level 2 Relu:**"""

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000,activation='relu')

# grid search
param_grid = {'hidden_layer_sizes': [ (1,20), (2,20), (3,20), (4,20), 
                                     (5,20), (6,20), (7,20), (8,20), 
                                     (9,20), (10,20), (11,20), (12,20),
                                     (13,20),(14,20),(15,20),(16,20),(17,20),(18,20),(19,20),(20,20)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**Level 1 Logistic:**"""

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000,activation='logistic')

# grid search
param_grid = {'hidden_layer_sizes': [ (1,), (2,), (3,), (4,), 
                                     (5,), (6,), (7,), (8,), 
                                     (9,), (10,), (11,), (12,),
                                     (13,),(14,),(15,),(16,),(17,),(18,),(19,),(20,)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**Level 2 Logistic:**"""

# get data
X  = df.drop(['treat'],axis=1)
actual_y = df['treat']

# neural network
model = MLPClassifier(max_iter=10000,activation='logistic')

# grid search
param_grid = {'hidden_layer_sizes': [ (1,20), (2,20), (3,20), (4,20), 
                                     (5,20), (6,20), (7,20), (8,20), 
                                     (9,20), (10,20), (11,20), (12,20),
                                     (13,20),(14,20),(15,20),(16,20),(17,20),(18,20),(19,20),(20,20)]}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# evaluate the best model
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['M', 'B']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**KNN:**"""

# basic data routines
import pandas as pd

# models
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

# model evaluation routines
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from assets.confint import classification_confint
# KNN
model = KNeighborsClassifier()

# grid search
param_grid = {'n_neighbors': list(range(1,51))}
grid = GridSearchCV(model, param_grid, cv=5)
grid.fit(X, actual_y)
print("Grid Search: best parameters: {}".format(grid.best_params_))

# accuracy of best model with confidence interval
best_model = grid.best_estimator_
predict_y = best_model.predict(X)
acc = accuracy_score(actual_y, predict_y)
lb,ub = classification_confint(acc,X.shape[0])
print("Accuracy: {:3.2f} ({:3.2f},{:3.2f})".format(acc,lb,ub))

# build the confusion matrix
labels = ['B', 'M']
cm = confusion_matrix(actual_y, predict_y)
cm_df = pd.DataFrame(cm)
print("Confusion Matrix:\n{}".format(cm_df))

"""##**Conclusion:**

The best MLP was the 2 layer logistic at .78. MLP is a deeper look into a database so it would be better than the 1 layer. The Knn was at .35 so the MLP was better. Overall. all of the MLPs scored really low, which suprised me.
"""